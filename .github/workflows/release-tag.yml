name: Bump version and create tag

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  tag-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest_tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Determine next version
        id: version
        run: |
          LABELS="${{ toJson(github.event.pull_request.labels) }}"
          PATCH=0
          MINOR=0
          MAJOR=0

          if echo "$LABELS" | grep -e "name:\s*fix\,"; then PATCH=1; fi
          if echo "$LABELS" | grep -e "name:\s*feature\,"; then MINOR=1; fi
          if echo "$LABELS" | grep -e "name:\s*breaking-change\,"; then MAJOR=1; fi

          VERSION="${{ steps.get_tag.outputs.latest_tag }}"
          [[ "$VERSION" =~ ([0-9]+)\.([0-9]+)\.([0-9]+) ]]
          MAJOR_V=${BASH_REMATCH[1]}
          MINOR_V=${BASH_REMATCH[2]}
          PATCH_V=${BASH_REMATCH[3]}

          if [[ "$MAJOR" == "1" ]]; then
            MAJOR_V=$((MAJOR_V+1)); MINOR_V=0; PATCH_V=0
          elif [[ "$MINOR" == "1" ]]; then
            MINOR_V=$((MINOR_V+1)); PATCH_V=0
          elif [[ "$PATCH" == "1" ]]; then
            PATCH_V=$((PATCH_V+1))
          fi

          NEW_TAG="v${MAJOR_V}.${MINOR_V}.${PATCH_V}"
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - name: Extract tag annotation
        id: tag_note
        run: |
          # Zrzucenie body do pliku tymczasowego
          echo "${{ github.event.pull_request.body }}" > pr_body.md
          
          # Wyciągnięcie release notes pomiędzy ## Release note a kolejnym ## (albo końcem pliku)
          NOTE=$(awk '
            BEGIN { flag=0 }
            toupper($0) ~ /^## RELEASE NOTE/ { flag=1; next }
            flag && /^## / { exit }
            flag { print }
          ' pr_body.md)
          
          # Jeśli nic nie znaleziono — użyj tytułu
          if [ -z "$NOTE" ]; then
            echo "No release note section found, using PR title."
            NOTE="${{ github.event.pull_request.title }}"
          fi
          
          # Wypisanie jako output
          {
            echo "annotation<<EOF"
            echo "$NOTE"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
      - name: Create Git Tag via GitHub API
        env:
          GITHUB_TOKEN: ${{ secrets.API_TOKEN_GH }}
          TAG: ${{ steps.version.outputs.new_tag }}
          MESSAGE: ${{ steps.tag_note.outputs.annotation }}
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          ENDPOINT_TAG_OBJ=https://api.github.com/repos/${{ github.repository }}/git/tags
          ENDPOINT_TAG_REF=https://api.github.com/repos/${{ github.repository }}/git/refs

          TAGGER_NAME="github-actions[bot]"
          TAGGER_EMAIL="github-actions[bot]@users.noreply.github.com"
          TAG_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          JSON_PAYLOAD=$(jq -n \
            --arg tag "$TAG" \
            --arg message "$MESSAGE" \
            --arg object "$COMMIT_SHA" \
            --arg type "commit" \
            --arg name "$TAGGER_NAME" \
            --arg email "$TAGGER_EMAIL" \
            --arg date "$TAG_DATE" \
            '{
              tag: $tag,
              message: $message,
              object: $object,
              type: $type,
              tagger: {
                name: $name,
                email: $email,
                date: $date
              }
            }'
          )
      
          echo "➡️  Creating tag object..."
          TAG_RESPONSE=$(curl -sSL \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$ENDPOINT_TAG_OBJ" \
            -d "$JSON_PAYLOAD"
          )
      
          TAG_SHA=$(echo "$TAG_RESPONSE" | jq -r '.sha')
      
          echo "➡️  Creating tag reference (refs/tags/$TAG)..."
          REF_PAYLOAD=$(jq -n --arg ref "refs/tags/$TAG" --arg sha "$TAG_SHA" \
            '{ref: $ref, sha: $sha}'
          )
      
          curl -sSL \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$ENDPOINT_TAG_REF" \
            -d "$REF_PAYLOAD"

